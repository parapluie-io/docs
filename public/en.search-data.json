{"/parapluie/authentication/":{"data":{"":"","consumer-api-key#Consumer API Key":"Parapluie uses two special token called the Parapluie Root Token and the Consumer API Key.\nIt is essential to distinguish between the Parapluie Root Token and a Consumer API key, as they serve different purposes and are used in different contexts. You will find on this page a sequence datagram showing how those tokens work together.\nParapluie Root Token The Parapluie Root Token is used for administrative actions within the Parapluie platform, such as creating or managing resources, like rate limits or Consumer API Keys.\nConsumer API Key A Consumer API Key is a token that is used between a Consumer (a customer of you or your frontend application) and Parapluie. This Consumer API Key is then processed by Parapluie to understand if the query should be forwarded to your backend API.","parapluie-root-token#Parapluie Root Token":""},"title":"Authentication"},"/parapluie/features/":{"data":{"":"Explore the following sections to learn how to use Parapluie:\nAPI Keys Rate Limiting Cache Custom Domain Monetization IP Whitelisting Reporting "},"title":"Features"},"/parapluie/features/cache/":{"data":{"":" ‚ÑπÔ∏è This feature has not been yet implemented. Parapluie can cache results to avoid calling the backend infrastructure on every request.\ngraph TD\rA[Client Request] --\u003e|New Request| B{Check Cache}\rB --\u003e|Cache Hit| C[Return Cached Data]\rB --\u003e|Cache Miss| D[Fetch Data from Backend]\rD --\u003e E[Return Data to Client]\rD --\u003e F[Update Cache with Data]When a client requests data, Parapluie first checks its cache. If the data is present and still valid (i.e., not expired), it returns the cached data immediately.\nThis speeds up response times and prevents the backend from being overwhelmed by repeated identical queries, thus optimizing resource utilization and improving overall system performance."},"title":"Cache"},"/parapluie/features/consumer-api-key/":{"data":{"":"","consumer-api-key-management#Consumer API Key management":"Parapluie simplifies the management of your Consumer API keys.\nA Consumer API key is a confidential token that is use in all request that are made from Consumer to Parapluie‚Äôs proxy. Read more here.\nIt must be included in every request to Parapluie, formatted as the header: { Authorization: Bearer api_key_xxx }.\nYou can assign various rate limits to yourConsumer API Key. These keys can be distributed to your customers for use with your API, or used directly in your frontend application to safeguard your backend infrastructure.\nConsumer API Key management Prerequisite : Before performing any of the following action you must have :\nA parapluie root token üîß For sake of documentation‚Äôs clarity, parapluie‚Äôs root token has been exported as an environement variable : export PARAPLUIE_ROOT_TOKEN=\u003croot_token_xxx\u003e Add a Consumer API keys cURL curl -X POST https://parapluie.io/consumer-api-key/create \\ --header '{\"Authorization\": \"Bearer $PARAPLUIE_ROOT_TOKEN\"}' \\ --data '{\"name\":\"api key for consumer XYZ\"}' The following fields will be computed and returned :\n{ \"id\":\"xxx\", \"name\":\"api key for consumer XYZ\", \"secret\":\"@Str0nGS‚Ç¨cr3T\", \"createdAt\":\"2024-07-30 16:20:45\" } List Consumer API keys cURL curl -X GET https://parapluie.io/consumer-api-key \\ --header '{\"Authorization\": \"Bearer $PARAPLUIE_ROOT_TOKEN\"}' This will list the API keys with theirs id, name, createdAt and lastUpdated :\n{ \"apiKeys\" : [ { \"consumerApiKeyId\":\"xxx\", \"name\":\"direct access for consumer XYZ\", \"createdAt\":\"2024-07-30T16:20:45Z\", \"lastUpdated\": \"2024-07-31T12:00:00Z\", }, { \"consumerApiKeyId\":\"abc\", \"name\":\"Frontend app\", \"createdAt\":\"2024-07-28T15:42:10Z\", \"lastUpdated\": \"2024-07-28T15:42:10Z\", } ] } Consumer API key details cURL API_KEY_ID=\"xxx\" curl -X GET https://parapluie.io/consumer-api-key/$API_KEY_ID \\ --header '{\"Authorization\": \"Bearer $PARAPLUIE_ROOT_TOKEN\"}' The following data should be returned :\n{ \"consumerApiKeyId\":\"xxx\", \"name\":\"Consumer API key\", \"secret\":\"@Str0nGS‚Ç¨cr3T\", \"createdAt\":\"2024-07-30T16:20:45Z\", \"lastUpdated\": \"2024-07-31T12:00:00Z\", \"usage\": { \"totalRequests\": 1200, \"successfulRequests\": 1180, \"failedRequests\": 20, \"rateLimits\": { \"limit\": 1000, \"remaining\": 800, \"resetTime\": \"2024-08-01T00:00:00Z\" }, \"endpoints\": [ { \"endpoint\": \"/v1/resource1\", \"requests\": 600, \"successful\": 590, \"failed\": 10, \"averageResponseTimeMs\": 150 }, { \"endpoint\": \"/v1/resource2\", \"requests\": 600, \"successful\": 590, \"failed\": 10, \"averageResponseTimeMs\": 200 } ], \"usageByCustomer\": [ { \"customerId\": \"customer_123\", \"requests\": 500, \"successful\": 495, \"failed\": 5 }, { \"customerId\": \"customer_456\", \"requests\": 700, \"successful\": 685, \"failed\": 15 } ] } } Delete a Consumer API key cURL API_KEY_ID=\"xxx\" curl -X DELETE https://parapluie.io/consumer-api-key/$API_KEY_ID \\ --header '{\"Authorization\": \"Bearer $PARAPLUIE_ROOT_TOKEN\"}' A confirmation message will be returned :\n{ \"consumerApiKeyId\":\"xxx\", \"message\":\"Consumer API key has been successfully deleted\", } "},"title":"Consumer API Key"},"/parapluie/features/custom-domain/":{"data":{"":"","rate-limiting#Rate Limiting":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.\nRate Limiting "},"title":"Custom Domain"},"/parapluie/features/ip-whitelisting/":{"data":{"":" ‚ÑπÔ∏è This feature has not been yet implemented. Parapluie features IP whitelisting, allowing developers to specify a set of trusted IP addresses that are permitted to access their API. By default, all other IP addresses will be denied, enhancing security and controlling access.\nThis ensures that only authorized users or systems can make requests to the API, reducing the risk of unauthorized access and potential abuse. With IP whitelisting, developers can effectively safeguard their API while maintaining tight control over who can interact with it."},"title":"IP Whitelisting"},"/parapluie/features/monetization/":{"data":{"":" ‚ÑπÔ∏è This feature has not been yet implemented. Parapluie helps developers monetize their APIs quickly by providing built-in tools for managing API subscriptions, usage quotas, and billing. With Parapluie, developers can easily set up different pricing tiers, track API usage, and enforce rate limits to ensure fair usage. Additionally, Parapluie‚Äôs analytics and reporting features offer insights into API performance and customer usage patterns, enabling developers to optimize their API offerings and increase revenue efficiently."},"title":"Monetization"},"/parapluie/features/package/":{"data":{"":"","rate-limiting#Rate Limiting":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.\nRate Limiting "},"title":"Package"},"/parapluie/features/rate-limiting/":{"data":{"":"","components-of-rate-limits#Components of Rate Limits":"","handling-rate-limit-exceeded#Handling Rate Limit Exceeded":"Parapluie provides a robust rate limiting feature to help you control the number of API requests made within a specified time frame. This helps protect your backend infrastructure from being overwhelmed by too many requests and ensures fair usage among all users.\nHow Rate Limits Work Rate limits define the maximum number of requests that can be made to an API within a specific time period. When the rate limit is reached, additional requests are denied until the rate limit window resets. This mechanism helps to:\nPrevent abuse and overuse of your API. Ensure consistent performance and availability of your services. Manage traffic and load on your backend infrastructure. Components of Rate Limits Limit: The maximum number of requests allowed within the rate limit window. Window: The time period during which the limit applies, such as per minute, hour, or day. Reset Time: The time at which the rate limit window resets and the request count is cleared. sequenceDiagram\rparticipant Client\rparticipant Parapluie\rparticipant Backend\rClient-\u003e\u003eParapluie: HTTP GET /v1/resourceA\rNote over Client,Parapluie: Include headers with Authorization: Bearer api_key_xxx\ralt Within rate limit\rParapluie-\u003e\u003eBackend: Forward request to backend\rNote over Parapluie,Backend: Add headers x-api-key: api_key_xxx\rBackend--\u003e\u003eParapluie: Response data\rParapluie--\u003e\u003eClient: Response data\relse Exceeds rate limit\rParapluie--\u003e\u003eClient: HTTP 429 Too Many Requests\rNote over Parapluie,Client: Rate limit exceeded. Retry after reset time\rend\rNote over Parapluie: Rate Limit = 1000 requests/hour\rParapluie-\u003e\u003eParapluie: Track request count and reset time\rNote over Parapluie: Reset request count every hourRate Limits Management Prerequisite :\nBefore performing any of the following action you must have :\nA parapluie root token A Consumer API Key üîß For sake of documentation‚Äôs clarity, parapluie‚Äôs root token has been exported as an environement variable : export PARAPLUIE_ROOT_TOKEN=\u003croot_token_xxx\u003e Create a Rate Limit cURL curl -X POST https://parapluie.io/rate-limit/create \\ --header '{\"Authorization\": \"Bearer $PARAPLUIE_ROOT_TOKEN\"}' \\ --data '{ \"rateLimitId\": \"basic\", \"description\":\"Rate limit plan for basic consumers\", \"limit\": 1000, \"period\": \"hour\" }' Command‚Äôs output :\n{ \"rateLimitId\": \"basic\", \"description\":\"Rate limit plan for basic consumers.\", \"limit\": 1000, \"period\": \"hour\", \"createdAt\": \"2024-07-31T12:00:00Z\" } id is a custom string that will identified the rate limit plan. This will be used to match a plan to a Consumer API Key further on. description can be anything you would like to help you describe what‚Äôs the rate limit plan about. limit is the number of request to allow within a specified time period. period is the time window for the rate limit to apply. In our example a maximum of 1000 requests per hour can be made.\nApplying Rate Limits to Consumer API Key When you have created a rate limit plan, you can then bind it to a Consumer API Key.\ncURL curl -X POST https://parapluie.io/api-keys/apply-rate-limit \\ --header '{\"Authorization\": \"Bearer $PARAPLUIE_ROOT_TOKEN\"}' \\ --data '{ \"consumerApiKeyId\": \"xxx\", \"rateLimitId\": \"basic\" }' Handling Rate Limit Exceeded When a user exceeds the defined rate limit, Parapluie responds with a 429 : Too Many Requests status code. The response includes information about when the rate limit will reset. Here‚Äôs how you can simulate this scenario with cURL:\ncurl -X GET https://parapluie.io/resourceA \\ -H \"Authorization: Bearer api_key_abc123\" If the rate limit is exceeded, you would receive a response similar to this:\n{ \"error\": \"Rate limit exceeded\", \"limit\": 1000, \"period\": \"hour\", \"remaining\": 0, \"resetTime\": \"2024-07-31T13:00:00Z\" } ","how-rate-limits-work#How Rate Limits Work":"","rate-limits-management#Rate Limits Management":""},"title":"Rate Limiting"},"/parapluie/getting-started/":{"data":{"":"","next#Next":"Explore the following sections to start adding more contents:\nOrganize Files Configuration Markdown ","quick-start#Quick Start":"Quick Start imfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\nüåê Demo ‚Üó","start-as-new-project#Start as New Project":"There are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project‚Äôs themes folder.\nSetup Hextra as Hugo module Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps Initialize a new Hugo site hugo new site my-site --format=yaml Configure Hextra theme via module # initialize hugo module cd my-site hugo mod init github.com/username/my-site # add Hextra theme hugo mod get github.com/imfing/hextra Configure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Voila, your new site preview is available at http://localhost:1313/.\nHow to update theme? To update all Hugo modules in your project to their latest versions, run the following command:\nhugo mod get -u To update Hextra to the latest released version, run the following command:\nhugo mod get -u github.com/imfing/hextra See Hugo Modules for more details.\nSetup Hextra as Git submodule Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Steps Initialize a new Hugo site hugo new site my-site --format=yaml Add Hextra theme as a Git submodule git submodule add https://github.com/imfing/hextra.git themes/hextra Configure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra Create your first content pages Create new content page for the home page and the documentation page:\nhugo new content/_index.md hugo new content/docs/_index.md Preview the site locally hugo server --buildDrafts --disableFastRender Your new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it‚Äôs essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init Failure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nHow to update theme? To update all submodules in your repository to their latest commits, run the following command:\ngit submodule update --remote To update Hextra to the latest commit, run the following command:\ngit submodule update --remote themes/hextra See Git submodules for more details."},"title":"Getting Started"},"/parapluie/how-it-works/":{"data":{"":"","1-consumer-send-a-request-to-parapluie#1. Consumer send a request to Parapluie":"","2-parapluie-process-the-request#2. Parapluie process the request":"","3-parapluie-forward-request-to-your-apicom#3. Parapluie forward request to your-api.com":"","4-your-apicom-send-the-data-back-to-parapluie#4. your-api.com send the data back to parapluie":"","5-parapluie-send-the-data-back-to-consumer-a#5. Parapluie send the data back to Consumer A":"Parapluie is a proxy sequenceDiagram\rautonumber\rConsumer A-\u003e\u003e+Parapluie:HTTP GET https://parapluie.io/v1/ressourceA note over Consumer A,Parapluie:headers : {Authorization : Bearer token_xxx, userId: foo}\rloop Processing\rParapluie-\u003e\u003eParapluie: Making sure this request should be forwarded to your-api.com\rend\rParapluie-\u003e\u003e+Your API:https://your-api.com/v1/ressourceA note over Parapluie, Your API:headers : {x-api-key : api_key_xxx, userId: foo}\rYour API-\u003e\u003e+Parapluie:data\rParapluie-\u003e\u003e+Consumer A:data1. Consumer send a request to Parapluie Consumer A sends a request to https://parapluie.io/v1/ressourceA with some headers :\n{ \"Authorization\" : \"Bearer token_xxx\", \"userId\": \"foo\" } Authorization value is an Consumer API key used by Parapluie when processing the query.\nExcepted Authorization, all headers will be forwarded AS-IS to your API (in our example userId header).\n2. Parapluie process the request Parapluie starts by processing the Authorization token :\nIdentifying the user - who do you claim to be ? Authenticating the user - prove you‚Äôre the one you claim to be ? Authorizing the user - what rules apply to you ? Once user has been authenticated, Parapluie checks what rules applies to this consumer :\nIs the requested data cached ? Is this consumer rate limited ? Does the rate limit apply to this query ? Once rules have been processed, data can either be sent back directly to Consumer A if cached, or the request can be forwarded to your-api.com.\nIn this example we will suppose no cache exist.\n3. Parapluie forward request to your-api.com When Parapluie forwards a query to your backend API, it will request the same route that was asked by Consumer A, here /v1/ressourceA.\nHeaders will also be forwarded, with the exception of Authorization : the value of this header is replaced with a secret key that only parapluie and your API know. This is to prevent Consumer A to directly query your API resources (read here why)\n4. your-api.com send the data back to parapluie Finally your API get into action ! This is the part your code do something, like fetching some data from a database for example. This data is then sent back to Parapluie.\n5. Parapluie send the data back to Consumer A The fetched data is then forwarded to Consumer A.","parapluie-is-a-proxy#Parapluie is a proxy":""},"title":"How it works"},"/parapluie/motivation/":{"data":{"":"","why-parapluie-exist#Why Parapluie exist":"Why Parapluie exist The motivation behind creating Parapluie stems from a crucial need in the developer community: an effortless and efficient way to safeguard public APIs. Public APIs are susceptible to misuse, either from malicious users or inadvertent bugs within the code. Such scenarios can result in excessive requests being sent to the server, leading to unexpectedly high cloud service bills.\nKey Motivations Preventing Financial Surprises Without proper safeguards, an infinite loop or excessive request generation can quickly inflate cloud service costs. Parapluie implements robust rate limiting to ensure that even in the event of abuse or an accidental infinite loop, your API remains protected from generating excessive and costly traffic.\nSimplified Setup Many existing solutions for API protection are complex and require significant setup and maintenance. Parapluie is designed to be simple and quick to deploy, enabling developers to add a layer of protection without extensive configuration or management overhead.\nPeace of Mind Knowing that your API is shielded from potential misuse allows you to focus on developing features and improving your product, rather than constantly monitoring for unusual traffic patterns and potential billing spikes.\nWith Parapluie, you can ensure that your API usage remains within safe limits, protecting both your resources and your budget from unexpected and potentially disruptive surprises."},"title":"Motivation"},"/parapluie/stuff/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files Configuration Markdown Syntax Highlighting LaTeX Diagrams Shortcodes Deploy Site "},"title":"stuff"},"/parapluie/stuff/advanced/":{"data":{"":"This section covers some advanced topics of the theme.\nMulti-language Customization Comments System "},"title":"Advanced"},"/parapluie/stuff/advanced/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/parapluie/stuff/advanced/customization/":{"data":{"":"Hextra offers some default customization options in the hugo.yaml config file to configure the theme. This page describes the available options and how to customize the theme further.","custom-css#Custom CSS":"To add custom CSS, we need to create a file assets/css/custom.css in our site. Hextra will automatically load this file.\nFont Family The font family of the content can be customized using:\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } Inline Code Element The color of text mixed with other text can customized with:\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } Primary Color The primary color of the theme can be customized by setting the --primary-hue and --primary-saturation variables:\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; } Syntax Highlighting List of available syntax highlighting themes are available at Chroma Styles Gallery. The stylesheet can be generated using the command:\nhugo gen chromastyles --style=github To override the default syntax highlighting theme, we can add the generated styles to the custom CSS file.","custom-layouts#Custom Layouts":"The layouts of the theme can be overridden by creating a file with the same name in the layouts directory of your site. For example, to override the single.html layout for docs, create a file layouts/docs/single.html in your site.\nFor further information, refer to the Hugo Templates.","custom-scripts#Custom Scripts":"You may add custom scripts to the end of the head for every page by adding the following file:\nlayouts/partials/custom/head-end.html ","further-customization#Further Customization":"Didn‚Äôt find what you were looking for? Feel free to open a discussion or make a contribution to the theme!"},"title":"Customization"},"/parapluie/stuff/advanced/multi-language/":{"data":{"":"Hextra supports creating site with multiple languages using Hugo‚Äôs multilingual mode.","enable-multi-language#Enable Multi-language":"To make our site multi-language, we need to tell Hugo the supported languages. We need to add to the site configuration file:\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Fran√ßais weight: 2 ja: languageName: Êó•Êú¨Ë™û weight: 3 ","manage-translations-by-filename#Manage Translations by Filename":"Hugo supports managing translations by filename. For example, if we have a file content/docs/_index.md in English, we can create a file content/docs/_index.fr.md for French translation.\ncontent docs _index.md _index.fr.md _index.ja.md Note: Hugo also supports Translation by content directory.","read-more#Read More":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","translate-menu-items#Translate Menu Items":"To translate menu items in the navigation bar, we need to set the identifier field:\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 and translate them in the corresponding i18n file:\ni18n/fr.yamldocumentation: Documentation blog: Blog ","translate-strings#Translate Strings":"To translate strings on the other places, we need to add the translation to the corresponding i18n file:\ni18n/fr.yamlreadMore: Lire la suite A list of strings used in the theme can be found in the i18n/en.yaml file."},"title":"Multi-language"},"/parapluie/stuff/configuration/":{"data":{"":"Hugo reads its configuration from hugo.yaml in the root of your Hugo site. The config file is where you can configure all aspects of your site. Check out the config file for this site exampleSite/hugo.yaml on GitHub to get a comprehensive idea of available settings and best practices.","footer#Footer":"Copyright To modify the copyright text displayed in your website‚Äôs footer, you‚Äôll need to create a file named i18n/en.yaml. In this file, specify your new copyright text as shown below:\ni18n/en.yamlcopyright: \"¬© 2024 YOUR TEXT HERE\" For your reference, an example i18n/en.yaml file can be found in the GitHub repository. Additionally, you could use Markdown format in the copyright text.","navigation#Navigation":"Menu Top right menu is defined under the menu.main section in the config file:\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github There are different types of menu items:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github These menu items can be sorted by setting the weight parameter.\nLogo and Title To modify the default logo, edit hugo.yaml and add the path to your logo file under static directory. Optionally, you can change the link that users are redirected to when clicking on your logo, as well as set the width \u0026 height of the logo in pixels.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","others#Others":"Favicon To customize the favicon for your site, place icon files under the static folder to override the default favicons from the theme:\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest Include both favicon.ico and favicon.svg files in your project to ensure your site‚Äôs favicons display correctly.\nWhile favicon.ico is generally for older browsers, favicon.svg is supported by modern ones. The optional favicon-dark.svg can be included for a tailored experience in dark mode. Feel free to use tools like favicon.io or favycon to generate these icons.\nTheme Configuration Use the theme setting to configure the default theme mode and toggle button, allowing visitors to switch between light or dark mode.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true Options for theme.default:\nlight - always use light mode dark - always use dark mode system - sync with the operating system setting (default) The theme.displayToggle parameter allows you to display a toggle button for changing themes. When set to true, visitors can switch between light or dark mode, overriding the default setting.\nPage Width The width of the page can be customized by the params.page.width parameter in the config file:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide There are three available options: full, wide, and normal. By default, the page width is set to normal.\nSimilarly, the width of the navbar and footer can be customized by the params.navbar.width and params.footer.width parameters.\nSearch Index Full-text search powered by FlexSearch is enabled by default. To customize the search index, set the params.search.flexsearch.index parameter in the config file:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content Options for flexsearch.index:\ncontent - full content of the page (default) summary - summary of the page, see Hugo Content Summaries for more details heading - level 1 and level 2 headings title - only include the page title To customize the search tokenize, set the params.search.flexsearch.tokenize parameter in the config file:\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward Options for flexsearch.tokenize:\nstrict - index whole words forward - incrementally index words in forward direction reverse - incrementally index words in both directions full - index every possible combination To exclude a page from the search index, set the excludeSearch: true in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics To enable Google Analytics, set services.googleAnalytics.ID flag in hugo.yaml:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","right-sidebar#Right Sidebar":"Table of Contents Table of contents is automatically generated from the headings in the content file. It can be disabled by setting toc: false in the front matter of the page.\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- Page Edit Link To configure the page edit link, we can set the params.editURL.base parameter in the config file:\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" The edit links will be automatically generated for each page based on the provided url as root directory. If you want to set edit link for a specific page, you can set the editURL parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration editURL: \"https://example.com/edit/this/page\" --- ","sidebar#Sidebar":"Main Sidebar For the main sidebar, it is automatically generated from the structure of the content directory. See the Organize Files page for more details.\nTo exclude a single page from the left sidebar, set the sidebar.exclude parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration sidebar: exclude: true --- Extra Links Sidebar extra links are defined under the menu.sidebar section in the config file:\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ‚Üó\" url: \"https://gohugo.io/documentation/\" weight: 3 "},"title":"Configuration"},"/parapluie/stuff/deploy-site/":{"data":{"":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.","cloudflare-pages#Cloudflare Pages":" Put your site source code in a Git repository (e.g. GitHub) Log in to the Cloudflare dashboard and select your account In Account Home, select Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git Select the repository, and in the Set up builds and deployments section, provide the following information: Configuration Value Production branch main Build command hugo --gc --minify Build directory public For more details, check out:\nDeploy a Hugo site. Language support and tools. ","github-pages#GitHub Pages":"GitHub Pages is the recommended way to deploy and host your website for free.\nIf you bootstrap the site using hextra-starter-template, it has provided GitHub Actions workflow out-of-the-box that helps automatically deploy to GitHub Pages.\nGitHub Actions Configuration Below is an example configuration from hextra-starter-template:\n.github/workflows/pages.yaml# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\"main\"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.121.2 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # fetch all history for .GitInfo and .Lastmod submodules: recursive - name: Setup Go uses: actions/setup-go@v5 with: go-version: '1.21' - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Setup Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 In your repository settings, set the Pages \u003e Build and deployment \u003e Source to GitHub Actions: By default, the above GitHub Actions workflow .github/workflows/pages.yaml assumes that the site is deploying to https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/.\nIf you are deploying to https://\u003cUSERNAME\u003e.github.io/ then modify the --baseURL:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" If you are deploying to your own domain, please change the --baseURL value accordingly.","netlify#Netlify":" Push your code to your Git repository (GitHub, GitLab, etc.) Import the project to Netlify If you are not using [hextra-starter-template][hextra-starter-template], configure the following manually: Configure the Build command to hugo --gc --minify Specify the Publish directory to public Add Environment variable HUGO_VERSION and set to 0.119.0 Deploy! Check Hugo on Netlify for more details.","vercel#Vercel":" Push your code to your Git repository (GitHub, GitLab, etc.) Go to Vercel Dashboard and import your Hugo project Configure the project, select Hugo as Framework Preset Override the Build Command and Install command: Set Build Command to hugo --gc --minify Set Install Command to yum install golang "},"title":"Deploy Site"},"/parapluie/stuff/diagrams/":{"data":{"":"Currently, Hextra supports Mermaid for diagrams.","mermaid#Mermaid":"Mermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser. For example, Mermaid can render flow charts, sequence diagrams, pie charts and more.\nUsing Mermaid in Hextra is as simple as writing a code block with language set mermaid:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` will be rendered as:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!For more information, please refer to Mermaid Documentation."},"title":"Diagrams"},"/parapluie/stuff/latex/":{"data":{"":"$\\KaTeX$ is used for rendering LaTeX math expressions. It can be enabled per page by setting math to true in the page front matter.\nMarkdown--- title: \"My Page with LaTeX\" math: true --- When enabled, the scripts, stylesheets and fonts from KaTeX will be included automatically in your site. You can start using LaTeX math expressions in your Markdown content.","chemistry#Chemistry":"Chemistry expressions are supported via mhchem extension.\nInline: $\\ce{H2O}$ is water.\nSeparate paragraph:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","example#Example":"Both inline and separate paragraph LaTeX math expressions are supported in the Markdown content.\nInline page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\nSeparate Paragraph page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ will be rendered as:\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$","supported-functions#Supported Functions":"For a list of supported functions, see KaTeX supported functions."},"title":"LaTeX"},"/parapluie/stuff/markdown/":{"data":{"":"Hugo supports Markdown syntax for formatting text, creating lists, and more. This page will show you some of the most common Markdown syntax examples.","configuration#Configuration":"Hugo uses Goldmark for Markdown parsing. Markdown rendering can be configured in hugo.yaml under markup.goldmark. Below is the default configuration for Hextra:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false For more configuration options, see Hugo documentation on Configure Markup.","learning-resources#Learning Resources":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","markdown-examples#Markdown Examples":"Styling Text Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* *italicized text* italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text Blockquotes Blockquote with attribution\nDon‚Äôt communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables Tables aren‚Äôt part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Syntax Highlighting Lists Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Images With caption:\nUnsplash Landscape The above quote is excerpted from Rob Pike‚Äôs talk during Gopherfest, November 18, 2015.¬†‚Ü©Ô∏é"},"title":"Markdown"},"/parapluie/stuff/organize-files/":{"data":{"":"","add-images#Add Images":"To add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent docs my-page.md image.png Then, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png) We can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) Alternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic images image.png content docs my-page.md Note that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png) ","breadcrumb-navigation#Breadcrumb Navigation":"Breadcrumbs are auto-generated based on the directory structure of /content.\nFor example, consider the file structure demonstrated above. Given that structure, the breadcrumbs atop the page at /docs/guide/organize-files/ would appear automatically as follows:\nDocumentation \u003e Guide \u003e Organize Files Customizing Breadcrumb Link Titles By default, each breadcrumb link is generated based on that page‚Äôs title parameter. You can customize this by specifying a linkTitle.\nFor example, if instead of Organize Files we wanted the breadcrumb to be Foo Bar:\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files --- This would now generate the following breadcrumbs:\nDocumentation \u003e Guide \u003e Foo Bar Hiding Breadcrumbs You can hide breadcrumbs completely from a page by specfying breadcrumbs: false in its front matter:\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files --- ","configure-content-directory#Configure Content Directory":"By default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.","directory-structure#Directory Structure":"By default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md Each of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent ‚îú‚îÄ‚îÄ _index.md // \u003c- / ‚îú‚îÄ‚îÄ docs ‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/ ‚îÇ ‚îú‚îÄ‚îÄ getting-started.md // \u003c- /docs/getting-started/ ‚îÇ ‚îî‚îÄ‚îÄ guide ‚îÇ ‚îú‚îÄ‚îÄ _index.md // \u003c- /docs/guide/ ‚îÇ ‚îî‚îÄ‚îÄ organize-files.md // \u003c- /docs/guide/organize-files/ ‚îî‚îÄ‚îÄ blog ‚îú‚îÄ‚îÄ _index.md // \u003c- /blog/ ‚îî‚îÄ‚îÄ post-1.md // \u003c- /blog/post-1/ ","layouts#Layouts":"Hextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section‚Äôs _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- The above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.","sidebar-navigation#Sidebar Navigation":"The sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ‚ÑπÔ∏è It is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections. "},"title":"Organize Files"},"/parapluie/stuff/shortcodes/":{"data":{"":"Hugo Shortcodes are simple snippets inside your content files calling built-in or custom templates.\nHextra provides a collection of beautiful shortcodes to enhance your content.\nCallout Cards Details FileTree Icon Steps Tabs "},"title":"Shortcodes"},"/parapluie/stuff/shortcodes/callout/":{"data":{"":"A built-in component to show important information to the reader.","example#Example":" üëæ A callout is a short piece of text intended to attract attention. ‚ÑπÔ∏è A callout is a short piece of text intended to attract attention. ‚ö†Ô∏è A callout is a short piece of text intended to attract attention. üö´ A callout is a short piece of text intended to attract attention. ","usage#Usage":"Default üåê Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"üåê\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ‚ÑπÔ∏è Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ‚ö†Ô∏è This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error üö´ Something went wrong and it‚Äôs going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} "},"title":"Callout"},"/parapluie/stuff/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":" Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. ","example#Example":" Callout No Icon Image CardUnsplash Landscape Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. ","image-card#Image Card":"Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo‚Äôs image processing method. options Configures Hugo‚Äôs image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo‚Äôs static/ directory. Processed image: use the relative path in Hugo‚Äôs assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo‚Äôs built in image processing commands, methods, and options see their Image Processing Documentation.","usage#Usage":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} "},"title":"Cards"},"/parapluie/stuff/shortcodes/details/":{"data":{"":"A built-in component to display a collapsible content.","example#Example":" Details This is the content of the details.\nMarkdown is supported.\nClick me to reveal This will be hidden by default. ","usage#Usage":" {{%/* details title=\"Details\" */%}} This is the content of the details. Markdown is **supported**. {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} This will be hidden by default. {{%/* /details */%}} "},"title":"Details"},"/parapluie/stuff/shortcodes/filetree/":{"data":{"":"","example#Example":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml ","usage#Usage":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} "},"title":"FileTree"},"/parapluie/stuff/shortcodes/icon/":{"data":{"":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.","example#Example":" ","usage#Usage":" {{\u003c/* icon \"github\" */\u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} Tip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/parapluie/stuff/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","example#Example":" Step 1 This is the first step.\nStep 2 This is the second step.\nStep 3 This is the third step.","usage#Usage":"Put Markdown h3 header within steps shortcode.\n{{%/* steps */%}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{%/* /steps */%}} "},"title":"Steps"},"/parapluie/stuff/shortcodes/tabs/":{"data":{"":"","example#Example":"JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that‚Äôs easy to read due to obvious semantics. ","usage#Usage":"Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that‚Äôs easy to read due to obvious semantics. Use Markdown Markdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" "},"title":"Tabs"},"/parapluie/stuff/syntax-highlighting/":{"data":{"":"Hugo uses Chroma, a general purpose syntax highlighter in pure Go, for syntax highlighting. It is recommended to use backticks for code blocks in Markdown content. For example:\nMarkdown```python def say_hello(): print(\"Hello!\") ``` will be rendered as:\ndef say_hello(): print(\"Hello!\") ","features#Features":"Filename To add a filename or title to the code block, set attribute filename:\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") Line Numbers To set line numbers, set attribute linenos to table and optionally set linenostart to the starting line number:\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") Highlighting Lines To highlight lines, set attribute hl_lines to a list of line numbers:\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() Copy Button By default, copy button is enabled for code blocks. Its behavior can changed by modifying the site configuration file:\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover ","supported-languages#Supported Languages":"For a list of supported languages, please see the Chroma documentation."},"title":"Syntax Highlighting"}}